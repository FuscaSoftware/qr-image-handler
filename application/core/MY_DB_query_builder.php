<?php

/**
 * User: sbraun
 * Date: 02.01.17
 * Time: 15:02
 */
class MY_DB_query_builder extends CI_DB_query_builder
{
    /**
     * @param string $sql
     * @param bool $binds
     * @param null $return_object
     * @return CI_DB_result|mixed
     */
    public function query($sql, $binds = FALSE, $return_object = NULL) {
        return parent::query($sql, $binds, $return_object); // TODO: Change the autogenerated stub
    }

    /**
     * @author sebastian.braun@fusca.de
     * @param string $sql
     * @param MY_Model $model
     * @return object[]
     */
    public function get_items_by_query(string $sql, MY_Model $model = null): array {
        if (is_null($model))
            return $this->query($sql)->result_object();
        else
            return $this->query($sql)->custom_result_object($model->item_class);
    }

    /**
     * @param string   $sql
     * @param MY_Model $model
     *
     * @return DynCollection
     */
    public function get_collection_by_query(string $sql, MY_Model $model = null): DynCollection {
        $result = $this->query($sql);
        if (is_null($model))
            $item_class = 'Item';
        elseif (!is_object($model))
            die("Model not given: " . var_export(__METHOD__,1) );
        else
            $item_class = $model->item_class;
        return new DynCollection($result, $item_class);
    }

    /**
     * @param string $sql
     * @param MY_Model $model
     * @return Item|object
     */
    public function get_item_by_query(string $sql, MY_Model $model) {
        return $this->query($sql)->custom_row_object(0, $model->item_class);
    }

    /**
     *
     * @param string $sql a query which should only return one field (like id)
     * @return string like:  '5','6','7' or '0' of nothing is found
     */
    public function get_scalar_by_sql(string $sql): string {
        $rows = $this->query($sql)->result_array();
        foreach ($rows as $i => $row){
            foreach ($row as $k => $v) {
                $values[] = $v;
            }
        }
        if (!empty($rows))
            return "'".implode("','", $values)."'";
        else
            return "0";#have to be 0 and not «'0'» so you can test for empty/bool
    }

    /**
     * @param array $queries
     * @param string $order_by
     * @param string $group_by
     * @return string sql query
     * @internal param $string $
     */
    public function union(array $queries, string $order_by = "", string $group_by = ""){
        if (empty($order_by) && empty($group_by))
            return "\n".implode("\n UNION \n",$queries)."\n";
        else
            return "\n".implode("\n UNION \n",$queries)."\n"." ".$order_by." ".$group_by."\n";
    }

    /**
     * @param array $queries
     * @param string $order_by
     * @param string $group_by
     * @return string sql query
     * @internal param $string $
     */
    public function union_all(array $queries, string $order_by = "", string $group_by = ""){
        if (empty($order_by) && empty($group_by))
            return "\n".implode("\n UNION ALL \n",$queries)."\n";
        else
            return "\n".implode("\n UNION ALL \n",$queries)."\n"." ".$order_by." ".$group_by."\n";
    }
}